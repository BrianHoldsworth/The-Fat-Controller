//
//  SettingsVC.swift
//  Remote
//
//  Created by Indiana Kernick on 4/2/21.
//  Copyright Â© 2021 Indiana Kernick. All rights reserved.
//

import UIKit
import CryptoKit

// Enables 128-bit AES encryption. Scanning a QR code generated by the server will be required.

class SettingsVC: UITableViewController, UITextFieldDelegate, NavigationChild {
    static let disconnectedText = "Not Connected"
    static let connectedText = "Connected"
    static let keyRequiredText = "Encryption Key Required"
    
    private var socket: SocketManager!
    private var status = SocketStatus.disconnected
    
    // --- Interface Builder --- //
    
    @IBOutlet weak var hostNameField: UITextField!
    @IBOutlet weak var statusCell: UITableViewCell!
    @IBOutlet var statusIndicator: UIActivityIndicatorView!
    @IBOutlet weak var statusLabel: UILabel!
    @IBOutlet var lowLatencySwitch: UISwitch!
    @IBOutlet var secureSwitch: UISwitch!
    @IBOutlet weak var scanButton: UIButton!
    
    @IBAction func lowLatencyToggled() {
        Storage.setLowLatencyMode(lowLatencySwitch.isOn)
        socket.setLowLatencyMode(enabled: lowLatencySwitch.isOn)
    }
    
    @IBAction func secureToggled() {
        Storage.setSecureMode(secureSwitch.isOn)
        socket.setSecureMode(enabled: secureSwitch.isOn)
    }
    
    // --- SettingsVC --- //
    
    static func statusText(status: SocketStatus, host: String) -> String {
        switch status {
        case .disconnected:
            return disconnectedText
        case .connectedWithoutKey:
            return keyRequiredText
        case .connected:
            return host
        }
    }
    
    // --- UIViewController --- //
    
    override func viewDidLoad() {
        super.viewDidLoad()
        hostNameField.delegate = self
        socketStatusChanged(status)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        socketStatusChanged(status)
        hostNameField.text = Storage.getHostName()
        lowLatencySwitch.isOn = Storage.getLowLatencyMode()
        secureSwitch.isOn = Storage.getSecureMode()
    }
    
    override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return .portrait
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        super.prepare(for: segue, sender: sender)
        
        if let dest = segue.destination as? ScannerVC {
            dest.succeeded = socket.setSecureKey
        }
    }
    
    // --- UITextFieldDelegate --- //
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if let text = hostNameField.text {
            Storage.setHostName(text)
            socket.connectTo(host: text)
        }
        view.endEditing(true)
        return true
    }

    // --- NavigationChild --- //
    
    func socketStatusChanged(_ status: SocketStatus) {
        self.status = status
        if statusCell == nil {
            return
        }
        switch status {
        case .disconnected:
            statusLabel.text = ""
            statusIndicator.startAnimating()
            statusCell.accessoryView = statusIndicator
            scanButton.isEnabled = false
        case .connectedWithoutKey:
            statusLabel.text = SettingsVC.keyRequiredText
            statusIndicator.stopAnimating()
            statusCell.accessoryView = nil
            scanButton.isEnabled = true
        case .connected:
            statusLabel.text = SettingsVC.connectedText
            statusIndicator.stopAnimating()
            statusCell.accessoryView = nil
            scanButton.isEnabled = false
        }
    }
    
    func socketStatusInitial(_ status: SocketStatus) {
        self.status = status
    }
    
    func setSocket(_ socket: SocketManager) {
        self.socket = socket
    }
}
